{"ast":null,"code":"var _jsxFileName = \"/Users/anzay/Desktop/ForethetaDev/recruitment-test/src/pages/Q1/Q1.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Q1 = () => {\n  _s();\n  const [question] = useState(\"Q1?\");\n  const videoRef = useRef(null);\n  const [mediaStream, setMediaStream] = useState(null);\n  const [recording, setRecording] = useState(false);\n  const [recordedChunks, setRecordedChunks] = useState([]);\n  const [recordedVideoUrl, setRecordedVideoUrl] = useState(null);\n  const [submitting, setSubmitting] = useState(false);\n  const [maxRecordingDuration] = useState(60); // Maximum recording duration in seconds (1 minute)\n  const [timer, setTimer] = useState(0); // Timer to track elapsed recording time\n  const name = sessionStorage.getItem(\"name\");\n  const folderId = sessionStorage.getItem(\"folderId\"); // Retrieve folderId from session storage\n  const navigate = useNavigate();\n  const [intervalId, setIntervalId] = useState(null); // State to hold interval id\n\n  // Prompt user for camera access when component mounts\n  useEffect(() => {\n    document.title = \"Recruitment Test - Q1\";\n    startMediaStream();\n    return () => {\n      // Clean up mediaStream and recording when component unmounts\n      if (mediaStream) {\n        mediaStream.getTracks().forEach(track => {\n          track.stop();\n        });\n      }\n      if (intervalId) {\n        clearInterval(intervalId);\n      }\n    };\n  }, []);\n  const startMediaStream = () => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      videoRef.current.srcObject = stream;\n      setMediaStream(stream);\n    }).catch(err => console.error(\"Error accessing media devices: \", err));\n  };\n  const startRecording = () => {\n    if (videoRef.current && !recording && mediaStream) {\n      const mediaRecorder = new MediaRecorder(mediaStream);\n      const chunks = [];\n      let timeElapsed = 0;\n\n      // Mute speakers during recording\n      mediaStream.getAudioTracks().forEach(track => {\n        track.enabled = false;\n      });\n      mediaRecorder.ondataavailable = e => {\n        chunks.push(e.data);\n      };\n      mediaRecorder.onstop = () => {\n        // Unmute speakers after recording stops\n        mediaStream.getAudioTracks().forEach(track => {\n          track.enabled = true;\n        });\n        setRecordedChunks(chunks);\n        const blob = new Blob(chunks, {\n          type: \"video/mp4\"\n        });\n        const url = URL.createObjectURL(blob);\n        setRecordedVideoUrl(url);\n        setRecording(false);\n      };\n\n      // Start recording\n      mediaRecorder.start();\n      setRecording(true);\n\n      // Start timer to check elapsed time\n      const id = setInterval(() => {\n        timeElapsed += 1;\n        setTimer(timeElapsed);\n\n        // Check if maximum duration exceeded\n        if (timeElapsed >= maxRecordingDuration) {\n          clearInterval(id);\n          mediaRecorder.stop();\n          alert(\"Maximum recording duration exceeded (1 minute). Please re-record or move to the next question.\");\n        }\n      }, 1000); // Update timer every second (1000 milliseconds)\n\n      // Store interval id in state\n      setIntervalId(id);\n    }\n  };\n  const stopRecording = () => {\n    if (mediaStream && recording) {\n      const tracks = mediaStream.getTracks();\n      tracks.forEach(track => track.stop());\n      setRecording(false);\n      setMediaStream(null);\n      clearInterval(intervalId); // Clear timer interval\n    }\n  };\n  const recordAgain = () => {\n    setRecordedVideoUrl(null);\n    setRecordedChunks([]);\n    startMediaStream();\n    setTimer(0); // Reset timer\n  };\n  const moveToNextQuestion = async () => {\n    if (recordedChunks.length > 0) {\n      setSubmitting(true);\n      const blob = new Blob(recordedChunks, {\n        type: \"video/mp4\"\n      });\n      const formData = new FormData();\n      formData.append(\"file\", blob, `${name}_q1.mp4`);\n      formData.append(\"folderId\", folderId);\n      try {\n        const response = await fetch(\"http://localhost:3001/upload-video\", {\n          method: \"POST\",\n          body: formData\n        });\n        if (response.ok) {\n          console.log(\"Video uploaded successfully!\");\n          setSubmitting(false);\n          navigate(\"/q2\");\n        } else {\n          console.error(\"Failed to upload video:\", response.statusText);\n          setSubmitting(false);\n          alert(\"Failed to upload video. Please try again.\");\n        }\n      } catch (error) {\n        console.error(\"Error uploading video:\", error);\n        setSubmitting(false);\n        alert(\"Error uploading video. Please try again.\");\n      }\n    }\n  };\n\n  // Update the video preview with live stream during recording\n  useEffect(() => {\n    if (recording && mediaStream) {\n      videoRef.current.srcObject = mediaStream;\n    }\n  }, [recording, mediaStream]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col justify-center items-center min-h-screen bg-gray-100 text-black\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: /*#__PURE__*/_jsxDEV(\"video\", {\n        ref: videoRef,\n        autoPlay: true,\n        muted: !recording // Mute during recording\n        ,\n        controls: recordedVideoUrl // Show controls only if video is recorded\n        ,\n        className: \"border rounded-lg\",\n        children: \"Your browser does not support the video tag.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center mb-4 text-sm text-gray-500\",\n      children: recording && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"Recording: \", timer, \" sec / \", maxRecordingDuration, \" sec\"]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), !recordedVideoUrl ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: recording ? stopRecording : startRecording,\n      className: `px-4 py-2 rounded-lg text-white ${recording ? \"bg-red-500 hover:bg-red-600\" : \"bg-green-500 hover:bg-green-600\"}`,\n      children: recording ? \"Stop Recording\" : \"Start Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"space-x-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: recordAgain,\n        className: \"px-4 py-2 rounded-lg text-white bg-green-500 hover:bg-green-600\",\n        children: \"Record Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: moveToNextQuestion,\n        className: \"px-4 py-2 rounded-lg text-white bg-blue-500 hover:bg-blue-600\",\n        disabled: submitting,\n        children: submitting ? \"Submitting...\" : \"Next Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }, this), submitting && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4 text-blue-500 font-semibold\",\n      children: \"Submitting video answer... Please wait.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n};\n_s(Q1, \"tsmb2KH6VklUZzs1iLn4BGfIoJs=\", false, function () {\n  return [useNavigate];\n});\n_c = Q1;\nexport default Q1;\nvar _c;\n$RefreshReg$(_c, \"Q1\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","Q1","_s","question","videoRef","mediaStream","setMediaStream","recording","setRecording","recordedChunks","setRecordedChunks","recordedVideoUrl","setRecordedVideoUrl","submitting","setSubmitting","maxRecordingDuration","timer","setTimer","name","sessionStorage","getItem","folderId","navigate","intervalId","setIntervalId","document","title","startMediaStream","getTracks","forEach","track","stop","clearInterval","navigator","mediaDevices","getUserMedia","video","audio","then","stream","current","srcObject","catch","err","console","error","startRecording","mediaRecorder","MediaRecorder","chunks","timeElapsed","getAudioTracks","enabled","ondataavailable","e","push","data","onstop","blob","Blob","type","url","URL","createObjectURL","start","id","setInterval","alert","stopRecording","tracks","recordAgain","moveToNextQuestion","length","formData","FormData","append","response","fetch","method","body","ok","log","statusText","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","autoPlay","muted","controls","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/anzay/Desktop/ForethetaDev/recruitment-test/src/pages/Q1/Q1.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst Q1 = () => {\n  const [question] = useState(\"Q1?\");\n  const videoRef = useRef(null);\n  const [mediaStream, setMediaStream] = useState(null);\n  const [recording, setRecording] = useState(false);\n  const [recordedChunks, setRecordedChunks] = useState([]);\n  const [recordedVideoUrl, setRecordedVideoUrl] = useState(null);\n  const [submitting, setSubmitting] = useState(false);\n  const [maxRecordingDuration] = useState(60); // Maximum recording duration in seconds (1 minute)\n  const [timer, setTimer] = useState(0); // Timer to track elapsed recording time\n  const name = sessionStorage.getItem(\"name\");\n  const folderId = sessionStorage.getItem(\"folderId\"); // Retrieve folderId from session storage\n  const navigate = useNavigate();\n\n  const [intervalId, setIntervalId] = useState(null); // State to hold interval id\n\n  // Prompt user for camera access when component mounts\n  useEffect(() => {\n    document.title = \"Recruitment Test - Q1\";\n    startMediaStream();\n\n    return () => {\n      // Clean up mediaStream and recording when component unmounts\n      if (mediaStream) {\n        mediaStream.getTracks().forEach((track) => {\n          track.stop();\n        });\n      }\n      if (intervalId) {\n        clearInterval(intervalId);\n      }\n    };\n  }, []);\n\n  const startMediaStream = () => {\n    navigator.mediaDevices\n      .getUserMedia({ video: true, audio: true })\n      .then((stream) => {\n        videoRef.current.srcObject = stream;\n        setMediaStream(stream);\n      })\n      .catch((err) => console.error(\"Error accessing media devices: \", err));\n  };\n\n  const startRecording = () => {\n    if (videoRef.current && !recording && mediaStream) {\n      const mediaRecorder = new MediaRecorder(mediaStream);\n      const chunks = [];\n      let timeElapsed = 0;\n\n      // Mute speakers during recording\n      mediaStream.getAudioTracks().forEach((track) => {\n        track.enabled = false;\n      });\n\n      mediaRecorder.ondataavailable = (e) => {\n        chunks.push(e.data);\n      };\n\n      mediaRecorder.onstop = () => {\n        // Unmute speakers after recording stops\n        mediaStream.getAudioTracks().forEach((track) => {\n          track.enabled = true;\n        });\n\n        setRecordedChunks(chunks);\n        const blob = new Blob(chunks, { type: \"video/mp4\" });\n        const url = URL.createObjectURL(blob);\n        setRecordedVideoUrl(url);\n        setRecording(false);\n      };\n\n      // Start recording\n      mediaRecorder.start();\n      setRecording(true);\n\n      // Start timer to check elapsed time\n      const id = setInterval(() => {\n        timeElapsed += 1;\n        setTimer(timeElapsed);\n\n        // Check if maximum duration exceeded\n        if (timeElapsed >= maxRecordingDuration) {\n          clearInterval(id);\n          mediaRecorder.stop();\n          alert(\n            \"Maximum recording duration exceeded (1 minute). Please re-record or move to the next question.\"\n          );\n        }\n      }, 1000); // Update timer every second (1000 milliseconds)\n\n      // Store interval id in state\n      setIntervalId(id);\n    }\n  };\n\n  const stopRecording = () => {\n    if (mediaStream && recording) {\n      const tracks = mediaStream.getTracks();\n      tracks.forEach((track) => track.stop());\n      setRecording(false);\n      setMediaStream(null);\n      clearInterval(intervalId); // Clear timer interval\n    }\n  };\n\n  const recordAgain = () => {\n    setRecordedVideoUrl(null);\n    setRecordedChunks([]);\n    startMediaStream();\n    setTimer(0); // Reset timer\n  };\n\n  const moveToNextQuestion = async () => {\n    if (recordedChunks.length > 0) {\n      setSubmitting(true);\n      const blob = new Blob(recordedChunks, { type: \"video/mp4\" });\n      const formData = new FormData();\n      formData.append(\"file\", blob, `${name}_q1.mp4`);\n      formData.append(\"folderId\", folderId);\n\n      try {\n        const response = await fetch(\"http://localhost:3001/upload-video\", {\n          method: \"POST\",\n          body: formData,\n        });\n\n        if (response.ok) {\n          console.log(\"Video uploaded successfully!\");\n          setSubmitting(false);\n          navigate(\"/q2\");\n        } else {\n          console.error(\"Failed to upload video:\", response.statusText);\n          setSubmitting(false);\n          alert(\"Failed to upload video. Please try again.\");\n        }\n      } catch (error) {\n        console.error(\"Error uploading video:\", error);\n        setSubmitting(false);\n        alert(\"Error uploading video. Please try again.\");\n      }\n    }\n  };\n\n  // Update the video preview with live stream during recording\n  useEffect(() => {\n    if (recording && mediaStream) {\n      videoRef.current.srcObject = mediaStream;\n    }\n  }, [recording, mediaStream]);\n\n  return (\n    <div className=\"flex flex-col justify-center items-center min-h-screen bg-gray-100 text-black\">\n      <h1 className=\"text-2xl font-bold mb-4\">{question}</h1>\n      <div className=\"mb-4\">\n        {/* Show live preview always */}\n        <video\n          ref={videoRef}\n          autoPlay\n          muted={!recording} // Mute during recording\n          controls={recordedVideoUrl} // Show controls only if video is recorded\n          className=\"border rounded-lg\"\n        >\n          Your browser does not support the video tag.\n        </video>\n      </div>\n      {/* Display timer */}\n      <div className=\"text-center mb-4 text-sm text-gray-500\">\n        {recording && (\n          <>\n            Recording: {timer} sec / {maxRecordingDuration} sec\n          </>\n        )}\n      </div>\n      {!recordedVideoUrl ? (\n        <button\n          onClick={recording ? stopRecording : startRecording}\n          className={`px-4 py-2 rounded-lg text-white ${\n            recording\n              ? \"bg-red-500 hover:bg-red-600\"\n              : \"bg-green-500 hover:bg-green-600\"\n          }`}\n        >\n          {recording ? \"Stop Recording\" : \"Start Recording\"}\n        </button>\n      ) : (\n        <div className=\"space-x-4\">\n          <button\n            onClick={recordAgain}\n            className=\"px-4 py-2 rounded-lg text-white bg-green-500 hover:bg-green-600\"\n          >\n            Record Again\n          </button>\n          <button\n            onClick={moveToNextQuestion}\n            className=\"px-4 py-2 rounded-lg text-white bg-blue-500 hover:bg-blue-600\"\n            disabled={submitting}\n          >\n            {submitting ? \"Submitting...\" : \"Next Question\"}\n          </button>\n        </div>\n      )}\n      {submitting && (\n        <div className=\"mt-4 text-blue-500 font-semibold\">\n          Submitting video answer... Please wait.\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Q1;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}