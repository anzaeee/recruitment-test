{"ast":null,"code":"const express = require(\"express\");\nconst multer = require(\"multer\");\nconst {\n  google\n} = require(\"googleapis\");\nconst fs = require(\"fs\");\nconst app = express();\nconst port = 3001;\n\n// Multer storage configuration\nconst storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, \"./uploads\"); // Destination folder where files will be stored temporarily\n  },\n  filename: function (req, file, cb) {\n    cb(null, file.originalname); // Use original file name\n  }\n});\nconst upload = multer({\n  storage: storage\n});\n\n// Initialize Google Drive API client\nconst key = require(\"./key.json\"); // Service account key for Google Drive API\n\nconst auth = new google.auth.JWT(key.client_email, null, key.private_key, [\"https://www.googleapis.com/auth/drive\"]);\nconst drive = google.drive({\n  version: \"v3\",\n  auth\n});\n\n// Function to upload a file to Google Drive\nconst uploadFileToDrive = async (fileName, filePath, mimeType) => {\n  try {\n    const response = await drive.files.create({\n      requestBody: {\n        name: fileName,\n        mimeType: mimeType,\n        parents: [\"your-parent-folder-id\"] // Optional: ID of the folder where you want to upload\n      },\n      media: {\n        mimeType: mimeType,\n        body: fs.createReadStream(filePath)\n      }\n    });\n    console.log(\"File uploaded successfully:\", response.data);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error uploading file to Google Drive:\", error.message);\n    throw new Error(\"Failed to upload file to Google Drive.\");\n  }\n};\n\n// Route to handle video upload and upload to Google Drive\napp.post(\"/upload-video\", upload.single(\"video\"), async (req, res) => {\n  try {\n    const file = req.file;\n    if (!file) {\n      return res.status(400).send(\"No file uploaded.\");\n    }\n    const filePath = file.path;\n    const fileName = file.originalname;\n    const mimeType = file.mimetype;\n\n    // Upload file to Google Drive\n    await uploadFileToDrive(fileName, filePath, mimeType);\n\n    // Optionally, you can now handle further processing like responding with success\n    res.status(200).send(\"Video uploaded and saved to Google Drive successfully.\");\n  } catch (error) {\n    console.error(\"Error handling file upload:\", error);\n    res.status(500).send(\"Failed to upload video and save to Google Drive.\");\n  }\n});\napp.listen(port, () => {\n  console.log(`Server listening at http://localhost:${port}`);\n});","map":{"version":3,"names":["express","require","multer","google","fs","app","port","storage","diskStorage","destination","req","file","cb","filename","originalname","upload","key","auth","JWT","client_email","private_key","drive","version","uploadFileToDrive","fileName","filePath","mimeType","response","files","create","requestBody","name","parents","media","body","createReadStream","console","log","data","error","message","Error","post","single","res","status","send","path","mimetype","listen"],"sources":["/Users/anzay/Desktop/ForethetaDev/recruitment-test/src/pages/Q1/Q1.js"],"sourcesContent":["const express = require(\"express\");\nconst multer = require(\"multer\");\nconst { google } = require(\"googleapis\");\nconst fs = require(\"fs\");\n\nconst app = express();\nconst port = 3001;\n\n// Multer storage configuration\nconst storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, \"./uploads\"); // Destination folder where files will be stored temporarily\n  },\n  filename: function (req, file, cb) {\n    cb(null, file.originalname); // Use original file name\n  },\n});\n\nconst upload = multer({ storage: storage });\n\n// Initialize Google Drive API client\nconst key = require(\"./key.json\"); // Service account key for Google Drive API\n\nconst auth = new google.auth.JWT(key.client_email, null, key.private_key, [\n  \"https://www.googleapis.com/auth/drive\",\n]);\n\nconst drive = google.drive({ version: \"v3\", auth });\n\n// Function to upload a file to Google Drive\nconst uploadFileToDrive = async (fileName, filePath, mimeType) => {\n  try {\n    const response = await drive.files.create({\n      requestBody: {\n        name: fileName,\n        mimeType: mimeType,\n        parents: [\"your-parent-folder-id\"], // Optional: ID of the folder where you want to upload\n      },\n      media: {\n        mimeType: mimeType,\n        body: fs.createReadStream(filePath),\n      },\n    });\n\n    console.log(\"File uploaded successfully:\", response.data);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error uploading file to Google Drive:\", error.message);\n    throw new Error(\"Failed to upload file to Google Drive.\");\n  }\n};\n\n// Route to handle video upload and upload to Google Drive\napp.post(\"/upload-video\", upload.single(\"video\"), async (req, res) => {\n  try {\n    const file = req.file;\n    if (!file) {\n      return res.status(400).send(\"No file uploaded.\");\n    }\n\n    const filePath = file.path;\n    const fileName = file.originalname;\n    const mimeType = file.mimetype;\n\n    // Upload file to Google Drive\n    await uploadFileToDrive(fileName, filePath, mimeType);\n\n    // Optionally, you can now handle further processing like responding with success\n    res\n      .status(200)\n      .send(\"Video uploaded and saved to Google Drive successfully.\");\n  } catch (error) {\n    console.error(\"Error handling file upload:\", error);\n    res.status(500).send(\"Failed to upload video and save to Google Drive.\");\n  }\n});\n\napp.listen(port, () => {\n  console.log(`Server listening at http://localhost:${port}`);\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}